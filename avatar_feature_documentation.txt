# Avatar System Documentation

This document explains how avatars work in the chat application, including storage, 
upload processes, and display mechanisms for both users and groups.

## 1. Avatar Storage

### File System Storage
- Avatars are stored in the `static/avatars` directory
- The path is configured in app.py: `UPLOAD_FOLDER = os.path.join(basedir, 'static', 'avatars')`
- The application creates this folder automatically if it doesn't exist
- Allowed file extensions: PNG, JPG, JPEG, GIF (defined in ALLOWED_EXTENSIONS)

### Database Storage
- User and group records store the path to their avatars, not the actual files
- The avatar_path attribute typically contains a relative path from the static folder

## 2. Avatar Upload Process

### User Avatar Upload

#### Frontend
1. UI provides an avatar placeholder with upload icon (`avatarPlaceholder` element)
2. Hidden file input (`avatarInput`) triggers when the avatar placeholder is clicked
3. When a file is selected, the `uploadAvatar()` function is called in ui.js
4. The file is validated (max 5MB) and sent via FormData to the server
5. On success, the current user data is refreshed and the avatar is updated in the UI

```javascript
// From ui.js - User avatar upload flow
function setupAvatarUpload() {
  // User clicks on avatar placeholder
  avatarPlaceholder.addEventListener('click', () => {
    avatarInput.click(); // Opens file dialog
  });
  
  // When file is selected
  avatarInput.addEventListener('change', function() {
    if (this.files && this.files[0]) {
      uploadAvatar(this.files[0]) // Sends file to server
        .then(data => {
          if (data.success) {
            fetchCurrentUser().then(userData => {
              updateSidebarAvatar(userData.avatar_path);
            });
          }
        });
    }
  });
}
```

#### Backend
1. Server receives file at the `/upload_avatar` endpoint
2. Validates file type and size
3. Generates a unique filename to prevent conflicts
4. Saves the file to the avatars directory
5. Updates the user record with the new avatar path
6. Returns success response with updated user data

### Group Avatar Upload

#### Frontend
1. Group creation/edit modal has an avatar preview area (`groupAvatarPreview`)
2. Hidden file input (`groupAvatarInput`) triggers when clicked
3. When creating a group, the avatar is included in the form submission
4. When editing a group, a similar upload process is used

```javascript
// From various JS files - Group avatar setup
function setupGroupAvatarUpload() {
  const avatarPreview = document.getElementById('groupAvatarPreview');
  const avatarInput = document.getElementById('groupAvatarInput');
  
  // Similar flow to user avatar upload
  // File is included in form submission
}
```

#### Backend
1. Server processes the group creation/edit request
2. If an avatar file is included, it's saved similarly to user avatars
3. Group record is updated with the avatar path
4. Returns updated group data in response

## 3. Avatar Display

### CSS Components
The application uses consistent CSS classes to display avatars:

1. Container elements:
   - `.avatar-placeholder` - For user avatars in sidebar/profile
   - `.chat-user-avatar` - For avatars in chat headers
   - `.contact-avatar` - For avatars in contact list
   - `.group-avatar-wrapper` - For group avatar creation/editing

2. Image display:
   - `.avatar-image` - Applied to <img> elements showing avatars
   - `.avatar-initials` - For fallback when no avatar image is available

3. Upload UI:
   - `.avatar-upload-icon` - The plus icon shown on hover for uploads
   - `.group-avatar-upload` - Container for group avatar upload UI

### Avatar Fallback Mechanism
When no avatar image is available, the system displays the first letter of the user's or group's name:

```javascript
// Example from multiple places in the code
if (userData.avatar_path) {
  // Display image
  element.innerHTML = `<img src="${userData.avatar_path}" alt="${userData.name}" class="avatar-image">`;
} else {
  // Display initials as fallback
  element.innerHTML = `<div class="avatar-initials">${userData.name.charAt(0)}</div>`;
}
```

## 4. Avatar Update Flow

### User Avatar Update Flow
1. User clicks on avatar in sidebar/profile
2. File selection dialog opens
3. User selects an image file
4. File is sent to server via AJAX
5. Server processes and stores the image
6. Response contains updated user data with new avatar_path
7. Frontend updates all instances of user's avatar:
   - Sidebar avatar is updated via updateSidebarAvatar()
   - Any open screens with the user avatar are refreshed

### Group Avatar Update Flow
1. During group creation:
   - User clicks on group avatar placeholder
   - Selected image is previewed immediately
   - Image is included in form submission when creating the group
   
2. When editing a group:
   - Admin clicks on current group avatar
   - Selected image is previewed immediately
   - On form submission, avatar is uploaded along with other changes
   - Group info is refreshed and avatar is updated in UI

## 5. Common Issues & Troubleshooting

### Path Issues
- Ensure avatar paths are correctly stored (relative or absolute)
- Check if the application properly prepends `/static/` to paths when needed
- Group avatars may need path correction similar to:
  ```javascript
  let avatarSrc = group.avatar_path;
  if (!avatarSrc.startsWith('http') && !avatarSrc.startsWith('/static/')) {
    avatarSrc = `/static/${avatarSrc}`;
  }
  ```

### Display Issues
- Ensure CSS classes are correctly applied
- Check if the avatar containers have proper dimensions
- Verify avatar image styling (object-fit: cover) is applied
- Check z-index if avatar icons/overlays aren't visible

### Upload Issues
- Verify form enctype="multipart/form-data" for forms with file uploads
- Check maximum file size limits
- Ensure file input is properly connected to click handlers
- Verify server has write permissions to avatar directory
- Check server response for detailed error messages

## 6. Important Code References

### Frontend Avatar Update
```javascript
function updateAvatar(userData) {
  // Clear existing avatar content
  avatarPlaceholder.innerHTML = '';
  
  if (userData.avatar_path) {
    // Create and add image
    const img = document.createElement('img');
    img.src = userData.avatar_path;
    img.alt = userData.user_name;
    img.className = 'avatar-image';
    avatarPlaceholder.appendChild(img);
  } else {
    // Create initials avatar
    const initialsDiv = document.createElement('div');
    initialsDiv.className = 'avatar-initials';
    initialsDiv.textContent = userData.user_name.charAt(0);
    avatarPlaceholder.appendChild(initialsDiv);
  }
  
  // Re-add the upload icon
  avatarPlaceholder.appendChild(uploadIcon);
}
```

## 7. Image Loading and Display Cycle

This section explains the complete lifecycle of avatar images from server storage to client display.

### 7.1 Image Loading Process

1. **Server-side Initialization**:
   - When application starts, it ensures the avatar directory exists (`os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)`)
   - The server maps the `/static/` URL prefix to the actual file directory

2. **Initial Page Load**:
   - When a user logs in, their avatar path is added to the session: `session['avatar_path'] = user.avatar_path`
   - The main dashboard template is loaded with user data including avatar path

3. **Browser Request Flow**:
   - Browser parses HTML and encounters `<img>` tags or CSS background images
   - For each avatar image, browser initiates a separate HTTP request to fetch the file
   - Request format: `GET /static/avatars/{filename}`
   - The server handles this through Flask's static file serving mechanism
   - Image binary data is returned with appropriate Content-Type header

### 7.2 Frontend Display Process

1. **DOM Element Creation**:
   - Avatar containers are created (e.g., `avatarPlaceholder`, `chat-user-avatar`)
   - For users with avatars, an `<img>` element is created with `src` attribute pointing to the image path
   - For users without avatars, an element with initials is created instead

2. **Image Rendering**:
   ```javascript
   // Typical avatar rendering logic
   if (user.avatar_path) {
     // Create image element
     const img = document.createElement('img');
     img.src = user.avatar_path;
     img.alt = user.name;
     img.className = 'avatar-image';
     container.appendChild(img);
   } else {
     // Create fallback with initials
     const initialsDiv = document.createElement('div');
     initialsDiv.className = 'avatar-initials';
     initialsDiv.textContent = user.name.charAt(0);
     container.appendChild(initialsDiv);
   }
   ```

3. **Browser Loading States**:
   - While the image is loading, the browser allocates space based on container dimensions
   - If specified, a loading placeholder might be displayed
   - Once loaded, the image is rendered with proper styling (border-radius, object-fit)
   - If loading fails (404, network error), the browser may show a broken image icon unless error handling is implemented

### 7.3 Dynamic Avatar Updates

When an avatar is changed, this flow occurs:

1. **Client-side Update**:
   - The file is selected and uploaded via AJAX/FormData
   - A temporary preview may be shown using `URL.createObjectURL()` before upload completes
   - The upload request is sent to the server

2. **Server Processing**:
   - Server receives file, validates, and saves to avatars directory
   - The user or group record is updated with new path
   - Server responds with success and updated data

3. **UI Refresh**:
   - The client receives updated user/group data with new avatar_path
   - All instances of the avatar are updated in the DOM:
   ```javascript
   function updateAvatarDisplays(newAvatarPath) {
     // Update sidebar avatar
     updateSidebarAvatar(newAvatarPath);
     
     // Update any open chat headers
     const chatAvatars = document.querySelectorAll('.chat-user-avatar');
     chatAvatars.forEach(avatar => {
       // Check if this avatar belongs to the updated user
       if (avatar.dataset.userId === userId) {
         avatar.innerHTML = `<img src="${newAvatarPath}" alt="User Avatar">`;
       }
     });
   }
   ```

4. **Browser Caching**:
   - The browser may cache avatar images for performance
   - Query parameters or cache busting techniques may be used to force reload:
   ```javascript
   img.src = `${userData.avatar_path}?t=${Date.now()}`; // Add timestamp to prevent caching
   ```

### 7.4 Technical Implementation Details

1. **Image Sizing and Optimization**:
   - Avatars are displayed in various sizes throughout the application:
     * Large: Profile page (typically 150px×150px)
     * Medium: Chat headers (typically 48px×48px)
     * Small: Contact list items (typically 36px×36px)
   - The same source image is used for all sizes, with CSS controlling dimensions
   - `object-fit: cover` ensures proper cropping without distortion

2. **Progressive Loading**:
   - For larger avatar images, the browser may render them progressively
   - This behavior is browser-dependent and not controlled by the application

3. **Error Handling**:
   - If an avatar image fails to load, the application falls back to showing initials
   - This is typically handled via the onerror attribute on img elements:
   ```javascript
   img.onerror = function() {
     // Replace with initials
     const parent = this.parentNode;
     const initialsDiv = document.createElement('div');
     initialsDiv.className = 'avatar-initials';
     initialsDiv.textContent = userName.charAt(0);
     parent.replaceChild(initialsDiv, this);
   };
   ```

4. **Path Resolution**:
   - Avatar paths may be stored in different formats:
     * Relative to static folder: `avatars/user123.jpg`
     * With /static/ prefix: `/static/avatars/user123.jpg`
     * Absolute URLs for external images
   - The code handles these variations with path normalization:
   ```javascript
   function normalizeAvatarPath(path) {
     if (!path) return null;
     if (path.startsWith('http')) return path; // External URL
     return path.startsWith('/static/') ? path : `/static/${path}`;
   }
   ```

Understanding this complete lifecycle helps diagnose issues in avatar display, whether they occur during upload, storage, retrieval, or rendering phases.

### CSS Styling
The avatar styling is distributed across multiple CSS files:
- base.css - Core avatar styles
- profile.css - User profile avatar styling
- contacts.css - Contact list avatar styling  
- modals.css - Group avatar styling in modals
- chat.css - Chat header avatar styling
